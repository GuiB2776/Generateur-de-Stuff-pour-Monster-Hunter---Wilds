üé® Charte graphique propos√©e (style Monster Hunter √©pique)

√âl√©ment	                         Valeur

Couleur primaire	            #7A4419 (brun chasseur, cuir)
Couleur secondaire	            #2F1E13 (brun fonc√©, contraste fort)
Fond g√©n√©ral	                #F8F1E5 (beige parchemin)
Typo principale	'Cinzel', serif (style ancien √©pique)
Accent couleurs	            #B9925E (or doux pour titres/boutons)





Voici tes nouvelles instructions d'am√©liorations et modifications √† apporter, fais moi un dossier .zip avec toutes les modifications et am√©liorations : 
1. Il faut que les composants n√©cessaires s'affichent en-dessous des √©quipements s√©lectionn√©s et des statistiques cumul√©es.
2. Il faut que la const armorData soit seulement pr√©sente dans le fichier armors.js et que les diff√©rentes fonctionnalit√©s aillent chercher les donn√©es dans ce fichier.
3. Il faut que dans la const armorData il y ait aussi les composants n√©cessaires pour craft ces √©quipements. Ils s'afficheront dans la section : Composants n√©cessaires. 
4. Il faut que dans la const armorDate il y ait aussi les joyaux pr√©sents sur les √©quipements. Ils seront affich√©s dans une nouvelle section : Joyaux.
5. Exemple d'un set d'armure en utilisant celui "Espoir" dans la const armorData. 
    Il y a donc dedans et √† utiliser : 
        - le chemin relatif vers l'image d'illustration de l'armure
        - les parties et leurs statistiques
        - les composants avec leurs nombres et les liens vers le site officiel
        - les emplacements pour des joyaux avec les joyaux, leurs effets et les liens vers le site officiel
    Exemple : 

const armorData = {
  "Espoir": {
    image: "images/armures/espoir.png",
    parts: {
      "T√™te":     { defense: 2, feu: 1, eau: 0, foudre: 1, glace: 0, dragon: 0 },
      "Plastron": { defense: 2, feu: 1, eau: 0, foudre: 1, glace: 0, dragon: 0 },
      "Gants":    { defense: 2, feu: 1, eau: 0, foudre: 1, glace: 0, dragon: 0 },
      "Tassette": { defense: 2, feu: 1, eau: 0, foudre: 1, glace: 0, dragon: 0 },
      "Gr√®ves":   { defense: 2, feu: 1, eau: 0, foudre: 1, glace: 0, dragon: 0 }
    },
    components: {
      "√âcaille d'Herbiore": { nombre: 2, lien: "https://monsterhunter.com/composant/herbiore" },
      "Plume de Florest":   { nombre: 1, lien: "https://monsterhunter.com/composant/florest" },
      "Os Brut":            { nombre: 3, lien: "https://monsterhunter.com/composant/os-brut" }
    },
    slots: {
      "Joyau Attaque": { effet: "Augmente l'attaque", lien: "https://monsterhunter.com/joyau/attaque" },
      "Joyau Feu":     { effet: "R√©sistance au feu", lien: "https://monsterhunter.com/joyau/feu" }
    }
  },
};





0. Il faut que lorsque l'on recherche avec la search-bar.js, le container s√©lectionn√© par la recherche s'affiche en surbrillance tant que l'utilisateur n'a pas cliqu√© √† c√¥t√© ou dessus.
5. Il faut que l'exportation de build cr√©√© un fichier.JSON comme il fait d√©j√† et un fichier.txt que le joueur pourra utiliser pour avoir les informations sur son ordinateur.
6. 